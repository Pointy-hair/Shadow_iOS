//
//  SearchViewController.swift
//  Shadow
//
//  Created by Atinderjit Kaur on 26/06/17.
//  Copyright Â© 2017 Atinderjit Kaur. All rights reserved.
//

import UIKit

public var bool_AllTypeOfSearches = false
public var bool_CompanySchoolTrends = false
public var bool_LocationFilter = false
public var bool_Occupation = false
public var ratingType : String?



class SearchViewController: UIViewController {
    
    //Making secondary Searchbar
    var searchBar = UISearchBar()
    var btn2:UIButton = UIButton()
    var barBtn_Search: UIBarButtonItem?
    var lbl_Search = UILabel()


    override func viewDidLoad() {
        super.viewDidLoad()
        if self.revealViewController() != nil {
   //    self.menu_btn.target = self.revealViewController()
   //    self.menu_btn.action = #selector(SWRevealViewController.revealToggle(_:))
   //    self.view.addGestureRecognizer(self.revealViewController().panGestureRecognizer())
            self.view.addGestureRecognizer(self.revealViewController().tapGestureRecognizer())
        }
        // Do any additional setup after loading the view.
        
    }
    override func viewWillAppear(_ animated: Bool) {
        
        
        //Setting footer view
        self.showSearchBar()
        let searchTextField:UITextField = searchBar.subviews[0].subviews.last as! UITextField
        searchTextField.layer.cornerRadius = 8
        searchTextField.textAlignment = NSTextAlignment.left
        let image:UIImage = UIImage(named: "customsearch")!
        let imageView:UIImageView = UIImageView.init(image: image)
        searchTextField.leftView = imageView
        searchTextField.placeholder = "Search"
        
        searchTextField.attributedPlaceholder = NSAttributedString(string: "Search",
                                                                   attributes: [NSForegroundColorAttributeName: UIColor.white])
        searchTextField.leftViewMode = UITextFieldViewMode.always
        searchTextField.rightView = nil
        searchTextField.backgroundColor = UIColor.init(red: 144.0/255.0, green: 20.0/255.0, blue: 151.0/255.0, alpha: 1.0)
        
        searchTextField.resignFirstResponder()
        searchTextField.endEditing(true)

        self.navigationItem.setHidesBackButton(false, animated:true)
        self.tabBarController?.tabBar.isHidden = false
        self.navigationController?.setNavigationBarHidden(false, animated: false)
        

    }
    
    override func viewWillDisappear(_ animated: Bool) {
        self.tabBarController?.tabBar.isHidden = false
         self.tabBarController?.tabBar.isTranslucent = false
        
        DispatchQueue.main.async {
            self.searchBar.endEditing(true)
            self.view.endEditing(true)
            self.searchBar.resignFirstResponder()
            
        }
    }
    
    //MARK: Search Bar Appear & Disappear
    
    /**
     showSearchBar is called when the user taps on the search icon.
     */
    
    func showSearchBar() {
        
        searchBar.alpha = 0
        searchBar.returnKeyType = .done
        searchBar.delegate = self
        
        
        if let textFieldInsideSearchBar = self.searchBar.value(forKey: "searchField") as? UITextField,
            let glassIconView = textFieldInsideSearchBar.leftView as? UIImageView {
            
            //Magnifying glass
            glassIconView.frame = CGRect(x: 40, y: glassIconView.frame.origin.y , width: 16, height: 16)
            glassIconView.image = glassIconView.image?.withRenderingMode(UIImageRenderingMode.alwaysTemplate)
            glassIconView.tintColor = UIColor.white
            
            textFieldInsideSearchBar.layer.borderColor = UIColor.clear.cgColor
            textFieldInsideSearchBar.layer.cornerRadius = 4.0
            textFieldInsideSearchBar.layer.borderWidth = 1.0
            
        }
        
        navigationItem.titleView = searchBar
        navigationItem.setLeftBarButton(nil, animated: true)
        navigationItem.setRightBarButtonItems(nil, animated: true)
        navigationItem.setRightBarButton(nil, animated: true)
        
        self.searchBar.alpha = 1
      
        
    }
    
    
    func makeTopNavigationSearchbar()
    {
        searchBar.delegate = self
        searchBar.searchBarStyle = UISearchBarStyle.minimal
        searchBar.returnKeyType = .done
    }
  
    //Action of 4 search buttons
    
    
    @IBAction func Action_SelectCompany(_ sender: Any) {
        if self.checkInternetConnection()
        {
            ratingType = "Company"
            bool_CompanySchoolTrends = true
            self.PushToCustomSearchVC()
        }
        else
        {
            self.showAlert(Message: Global.macros.kInternetConnection, vc: self)
            
        }
     

    }
    
    
    @IBAction func Action_Location(_ sender: Any) {
        if self.checkInternetConnection()
        {
            bool_LocationFilter = true
            self.PushToCustomSearchVC()

        }
        else
        {
            self.showAlert(Message: Global.macros.kInternetConnection, vc: self)
            
        }
      
    }
    
    
    @IBAction func Action_School(_ sender: Any) {
        if self.checkInternetConnection()
        {
            
            ratingType = "School"
            bool_CompanySchoolTrends = true
            self.PushToCustomSearchVC()

        }
        else
        {
            self.showAlert(Message: Global.macros.kInternetConnection, vc: self)
            
        }
      
    }
    
    
    @IBAction func Action_Trends(_ sender: Any) {
        
        if self.checkInternetConnection()
        {
            ratingType = "Trend"
            bool_CompanySchoolTrends = true
            self.PushToCustomSearchVC()
        }
        else
        {
            self.showAlert(Message: Global.macros.kInternetConnection, vc: self)
            
        }
      
        
    }
    
    @IBAction func Action_Occupation(_ sender: UIButton) {
       
        
        if self.checkInternetConnection()
        {
            
            ratingType = "Occupation"
            bool_CompanySchoolTrends = true
            bool_Occupation = true
            self.PushToCustomSearchVC()

        }
        else
        {
            self.showAlert(Message: Global.macros.kInternetConnection, vc: self)
            
        }
        
    }
    
     // MARK: - Navigation to Custom search VC
    
    func PushToCustomSearchVC() {
        
        self.navigationController?.setNavigationBarHidden(true, animated: false)
        self.navigationItem.setHidesBackButton(true, animated:true)
        self.tabBarController?.tabBar.isHidden = true
        let vc = Global.macros.Storyboard.instantiateViewController(withIdentifier: "customSearch") as! CustomSearchViewController
        _ = self.navigationController?.pushViewController(vc, animated: true)
        
        
    }
    

    override func didReceiveMemoryWarning() {
        super.didReceiveMemoryWarning()
        // Dispose of any resources that can be recreated.
    }
    

    /*
    // MARK: - Navigation

    // In a storyboard-based application, you will often want to do a little preparation before navigation
    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
        // Get the new view controller using segue.destinationViewController.
        // Pass the selected object to the new view controller.
    }
    */

}




//MARK: SEARCHBAR METHODS

extension SearchViewController:UISearchBarDelegate{
    
    /**
     searchBarSearchButtonClicked is called when the user taps on the searchbar icon.
     
     :Param: searchBar is the searchbar which is clicked.
     */
    
    func searchBarSearchButtonClicked(_ searchBar: UISearchBar) {
        
     
        searchBar.resignFirstResponder()
        
    }
    
    /**
     searchBarTextDidBeginEditing is called when the user taps on the searchbar icon and start typing in the bar.
     :Param: searchBar is the searchbar which is clicked.
     */
    
    
    /**
     searchBarTextDidBeginEditing is called when the user taps on the searchbar icon and start typing in the bar.
     :Param: searchBar is the searchbar which is clicked.
     :range: is the current range of the text.
     :text : is the current letter typed by the user.
     */
    
    func searchBar(_ searchBar: UISearchBar, shouldChangeTextIn range: NSRange, replacementText text: String) -> Bool {
     
        return true
    }
    
    func searchBar(_ searchBar: UISearchBar, textDidChange searchText: String) {
        
        
    }
    
    
    /**
     searchBarCancelButtonClicked is called when the user taps on the cancel icon.
     :Param: searchBar is the searchbar which is clicked.
     */
    
    func searchBarTextDidBeginEditing(_ searchBar: UISearchBar) {
        
        if self.checkInternetConnection()
            {
                DispatchQueue.main.async {
                    
                    
                    self.searchBar.endEditing(true)
                    self.view.endEditing(true)
                    self.searchBar.resignFirstResponder()
                    self.searchBar.text = ""

                }
                
                bool_AllTypeOfSearches = true
                self.PushToCustomSearchVC()

        }
        else
        {
            self.showAlert(Message: Global.macros.kInternetConnection, vc: self)
        }
             }
    
    func searchBarCancelButtonClicked(_ searchBar: UISearchBar) {
        
        
    }
    
    func searchBarTextDidEndEditing(_ searchBar: UISearchBar) {
        
    }
    
}
